package dp

//121. 买卖股票的最佳时机
//给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
//如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
//
//注意：你不能在买入股票前卖出股票。
//示例 1:
//
//输入: [7,1,5,3,6,4]
//输出: 5
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

//dp[i] 前i个元素的最小值
//func maxProfit(prices []int) int {
//	dp := make([]int, len(prices))
//	var profit int
//	for i := 0; i < len(prices); i++ {
//		if i == 0 {
//			dp[0] = prices[i]
//			continue
//		}
//		if prices[i] <  dp[i - 1] {
//			dp[i] = prices[i]
//		} else {
//			dp[i] = dp[i - 1]
//			profit = max(prices[i] - dp[i], profit)
//		}
//	}
//	return profit
//}

//188. 买卖股票的最佳时机 IV
//给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
//
//设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
//
//注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
//示例 1:
//
//输入: [2,4,1], k = 2
//输出: 2
//解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
//示例 2:
//
//输入: [3,2,6,5,0,3], k = 2
//输出: 7
//解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
//     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

//dp[i][x][j] 第i天、已经进行了k笔交易、手头还剩下j只股票的情况下，所能获取的最大利润
func maxProfit(k int, prices []int) int {
	n := len(prices)
	if n == 0 || k == 0{
		return 0
	}
	dp := make([][][]int, n + 1)
	for i := 1;i <= n ; i++ {
		dp[i] = make([][]int, k+1)
		for kk := 1; kk <= k; kk++ {
			dp[i][kk] = make([]int, 2)
			if i == 1 {
				dp[i][kk][0] = 0
				dp[i][kk][1] = - prices[i - 1]
				continue
			}

			if kk == 1 {
				dp[i][kk][1] = max(dp[i - 1][kk][1], -prices[i - 1])
			} else {
				dp[i][kk][1] = max(dp[i - 1][kk][1], dp[i - 1][kk- 1][0] - prices[i - 1])
			}
			dp[i][kk][0] = max(dp[i - 1][kk][0], dp[i - 1][kk][1] + prices[i - 1])
		}
	}
	return max(dp[n][k][0], dp[n][k][1])
}